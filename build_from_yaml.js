"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var yaml_1 = require("yaml");
var fs_1 = require("fs");
var cv_1 = require("./src/app/cv");
function readYaml(file) {
    return new Promise(function (resolve, reject) {
        fs_1.readFile(file, 'utf8', function (err, data) {
            var cv = new cv_1.Cv; // new cv for yaml data
            if (err !== null) {
                return reject(err);
            }
            console.log(data); // print so input is visible in cicd logs
            var parsed = yaml_1.parse(data);
            // generate skills
            if (parsed.skills.length != 0) {
                try {
                    cv.skills = genSkills(parsed.skills);
                }
                catch (e) {
                    return reject(e);
                }
                return resolve(cv);
            }
        });
    });
}
// generates js skills from yaml skills
function genSkills(yamlSkills) {
    var skills = [];
    yamlSkills.forEach(function (v) {
        var skill = new cv_1.Skill;
        if (typeof v === "object") {
            skill = genSkill(v);
        }
        else if (typeof v === "string") {
            // if string assumed to be a skill which matches to same name topics
            skill.name = v;
        }
        else {
            throw "unsupported field in " + v;
        }
        skills.push(skill);
    });
    return skills;
}
// generates a js skill from a yaml skill definitions with options, simple one line skills are generated by parent function genSkills
function genSkill(item) {
    var skill = new cv_1.Skill;
    var fields = Object.getOwnPropertyNames(item);
    if (fields.length != 1) {
        throw "skill with more than one (or 0) names, should not be possible";
    }
    skill.name = fields[0];
    var skillOpt = new cv_1.SkillOption;
    item[fields[0]].forEach(function (option) {
        if (typeof option === "object") {
            // if child is an object, it must be a reserved keyword
            Object.getOwnPropertyNames(option).forEach(function (optName) {
                switch (optName) {
                    case "text":
                        skill.text = option[optName];
                        break;
                    case 'file':
                        skillOpt.file = option[optName];
                        break;
                    case 'rfile':
                        skillOpt.rfile = option[optName];
                        break;
                    default:
                        throw "invalid option name " + optName;
                }
            });
        }
        else if (typeof option === "string") {
            // if child is a string, assumed to be a topic. Multiple topics to match with are allowed.
            if (!skillOpt.hasOwnProperty("topics")) {
                skillOpt.topics = [];
            }
            skillOpt.topics.push(option);
        }
        else {
            // we should not get here
            throw "invalid yaml for cv";
        }
        if (Object.getOwnPropertyNames(skillOpt).length !== 0) {
            skill.options = skillOpt;
        }
    });
    return skill;
}
function readOldJson(file) {
    return new Promise(function (resolve, reject) {
        fs_1.readFile(file, 'utf8', function (err, data) {
            if (err !== null) {
                return reject(err);
            }
            return resolve(JSON.parse(data));
        });
    });
}
function combine(oldCv, newCv) {
    for (var key in oldCv) {
        newCv[key] = oldCv[key];
    }
    // newCv["causefailure"] = "matt daemon";
    return newCv;
}
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var newCv, oldCv, cvs, cv, payload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    newCv = readYaml("cv.yml");
                    oldCv = readOldJson("data.json");
                    return [4 /*yield*/, Promise.all([oldCv, newCv])["catch"](function (e) { return e; })];
                case 1:
                    cvs = _a.sent();
                    if (!Array.isArray(cvs)) { //if cvs isn't an array it must contain an error, due to being a Promise made will Promise.all
                        return [2 /*return*/, console.error(cvs)];
                    }
                    cv = combine(cvs[0], cvs[1]);
                    payload = JSON.stringify(cv);
                    fs_1.writeFile("cv.json", payload, 'utf-8', function (err) {
                        if (err !== null) {
                            throw "error writing file, error: " + err;
                        }
                        else {
                            console.log("succesfully parsed yaml and generated json cv");
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
if (require.main === module) {
    main();
}
